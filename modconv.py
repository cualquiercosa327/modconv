#vertexgen
#this file takes a collada file named cube4.fbx and generates vertices compatible with an n64 displaylist.
from pyassimp import *
import datetime
scale = 32 # Integer that scales the model. Default is 32.
flag = 0 # This for now is always set.
texture = 0
coord = 0
# Default RGBA values for when the model has no RGBA data (0-255)
rgbaR = 0
rgbaG = 0
rgbaB = 0
rgbaA = 255
loopCount = 0
print("vertexgen")
scene = load('cube5.fbx')
assert len(scene.meshes)
mesh = scene.meshes[0]
assert len(mesh.vertices)
vertexCount = len(mesh.vertices)
triCount = len(mesh.faces) / 3
vertexheader = open("output.h", "w")
currDate = str(datetime.datetime.now())
vertexheader.write("/*\n* VERTICES IN GBI FORMAT\n* GENERATED BY MODCONV ON: " + currDate + "\n*/\n\n")
vertexheader.write("#include <nusys.h> //This is temporary\n")
vertexheader.write("Vtx output__v[] = {\n")
try:
    assert len(mesh.colors[0])
    usingvrgba = 1
except:
    print("There are no vertex colors.")
    usingvrgba = 0
while (loopCount != vertexCount - 1):
    vertX = str(int(mesh.vertices[loopCount][0]) * scale)
    vertY = str(int(mesh.vertices[loopCount][1]) * scale)
    vertZ = str(int(mesh.vertices[loopCount][2]) * scale)
    # Vertex RGBA
    if(usingvrgba == 1):
        rgbaR = str(int(mesh.colors[0][loopCount][0] * 255))
        rgbaG = str(int(mesh.colors[0][loopCount][1] * 255))
        rgbaB = str(int(mesh.colors[0][loopCount][2] * 255))
        rgbaA = str(int(mesh.colors[0][loopCount][3] * 255))
    else:
        rgbaR = str(int(rgbaR))
        rgbaG = str(int(rgbaG))
        rgbaB = str(int(rgbaB))
        rgbaA = str(int(rgbaA))
    vertexheader.write("{   " + vertX + ",   " + vertY + ",   " + vertZ + ",0,   0,   0," + rgbaR + "," + rgbaG + "," + rgbaB + ",255},\n")
    loopCount = loopCount + 1

vertX = str(int(mesh.vertices[loopCount][0]) * scale)
vertY = str(int(mesh.vertices[loopCount][1]) * scale)
vertZ = str(int(mesh.vertices[loopCount][2]) * scale)
# Vertex RGBA
if(usingvrgba == 1):
    rgbaR = str(int(mesh.colors[0][loopCount][0] * 255))
    rgbaG = str(int(mesh.colors[0][loopCount][1] * 255))
    rgbaB = str(int(mesh.colors[0][loopCount][2] * 255))
    rgbaA = str(int(mesh.colors[0][loopCount][3] * 255))
else:
    rgbaR = str(int(rgbaR))
    rgbaG = str(int(rgbaG))
    rgbaB = str(int(rgbaB))
    rgbaA = str(int(rgbaA))

vertexheader.write("{   " + vertX + ",   " + vertY + ",   " + vertZ + ",0,   0,   0," + rgbaR + "," + rgbaG + "," + rgbaB + ",255}};\n")

outputcfile = open("output.c", "w")
outputcfile.write("/*\n* DISPLAYLIST IN GBI FORMAT\n* GENERATED BY MODCONV ON: " + currDate + "\n*/\n\n//Some decent defaults\n")
# Generate some sane defaults.
outputcfile.write("Gfx output__dl[] = {\ngsDPPipeSync(),\ngsDPSetCycleType(G_CYC_1CYCLE),\ngsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_AA_ZB_OPA_SURF2),\ngsSPClearGeometryMode((G_SHADE|G_SHADING_SMOOTH|G_LIGHTING|G_TEXTURE_GEN|G_TEXTURE_GEN_LINEAR|G_CULL_BOTH|G_FOG)),\ngsSPSetGeometryMode( G_ZBUFFER | G_CULL_BACK | G_SHADE | G_SHADING_SMOOTH | G_LIGHTING ),\ngsDPSetColorDither(G_CD_BAYER),\ngsDPSetCombineMode(G_CC_MULPRIMSHADE,     G_CC_MULPRIMSHADE), /* N64-SHADE-TYPE-G */\n")
loopCount = 0

#while (loopCount != triCount):

#    loopCount = loopCount + 1

outputcfile.write("gsSPEndDisplayList(),\n};") # end the displaylist
