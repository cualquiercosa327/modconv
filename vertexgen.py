#vertexgen
#this file takes a collada file named cube2.dae and generates vertices compatible with an n64 displaylist.
from pyassimp import *
import datetime

#"Declare" variables
vertX = 11
vertY = 22
vertZ = 33
flag = 0 # This for now is always set.
texture = 0
coord = 0
rgbaR = 0
rgbaG = 0
rgbaB = 0
rgbaA = 255 # This for now is always set.
loopCount = 0
print("vertexgen")
scene = load('cube2.dae')
assert len(scene.meshes)
mesh = scene.meshes[0]
assert len(mesh.vertices)
vertexCount = len(mesh.vertices)
vertexheader = open("output.h", "w")
currDate = str(datetime.datetime.now())
vertexheader.write("/*\n* VERTICES IN GBI FORMAT\n* GENERATED BY MODCONV ON: " + currDate + "\n*/\n\n")
vertexheader.write("#include <nusys.h> //This is temporary\n")
vertexheader.write("Vtx output__v[] = {\n")
while (loopCount != vertexCount - 1):
    
    vertX = mesh.vertices[loopCount][0]
    vertY = mesh.vertices[loopCount][1]
    vertZ = mesh.vertices[loopCount][2]
    vertX = vertX * 64
    vertY = vertY * 64    
    vertZ = vertZ * 64
    vertX = int(vertX)
    vertY = int(vertY)
    vertZ = int(vertZ)
    vertX = str(vertX)
    vertY = str(vertY)
    vertZ = str(vertZ)
    vertexheader.write("{   " + vertX + ",   " + vertY + ",   " + vertZ + ",0,   0,   0,0,0,0,255},\n")
    loopCount = loopCount + 1

vertX = mesh.vertices[loopCount][0]
vertY = mesh.vertices[loopCount][1]
vertZ = mesh.vertices[loopCount][2]
vertX = vertX * 64
vertY = vertY * 64    
vertZ = vertZ * 64
vertX = int(vertX)
vertY = int(vertY)
vertZ = int(vertZ)
vertX = str(vertX)
vertY = str(vertY)
vertZ = str(vertZ)
vertexheader.write("{   " + vertX + ",   " + vertY + ",   " + vertZ + ",0,   0,   0,0,0,0,255}};\n")
